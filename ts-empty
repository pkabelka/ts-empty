#!/bin/sh
# Shell script for listing unused TeamSpeak channels

#TS_SERVERADMIN_USERNAME="serveradmin"
#TS_SERVERADMIN_PASSWORD=""
#TS_SERVER_ADDRESS="127.0.0.1"
#TS_SERVER_QUERY_PORT="10011"

if [ -z "$TS_SERVERADMIN_USERNAME" ]; then
    read -p "TeamSpeak serveradmin username: [serveradmin]: " TS_SERVERADMIN_USERNAME
    if [ -z "$TS_SERVERADMIN_USERNAME" ]; then
        TS_SERVERADMIN_USERNAME="serveradmin"
    fi
fi

if [ -z "$TS_SERVERADMIN_PASSWORD" ]; then
    read -p "TeamSpeak serveradmin password: " TS_SERVERADMIN_PASSWORD
    if [ -z "$TS_SERVERADMIN_PASSWORD" ]; then
        echo "TeamSpeak serveradmin password not entered. Exiting"
        exit 1
    fi
fi

if [ -z "$TS_SERVER_ADDRESS" ]; then
    read -p "TeamSpeak server address: [127.0.0.1]: " TS_SERVER_ADDRESS
    if [ -z "$TS_SERVER_ADDRESS" ]; then
        TS_SERVER_ADDRESS="127.0.0.1"
    fi
fi

if [ -z "$TS_SERVER_QUERY_PORT" ]; then
    read -p "TeamSpeak server query port: [10011]: " TS_SERVER_QUERY_PORT
    if [ -z "$TS_SERVER_QUERY_PORT" ]; then
        TS_SERVER_QUERY_PORT="10011"
    fi
fi

ignored=$(echo "$TS_IGNORED_CHANNELS" | tr -s '\n' '|' | sed -e 's/^|//' -e 's/|$//' -e 's/\s/\\\\s/g')

if [ "$ignored" = "" ]; then
    # ignore something impossible to appear for empty list
    ignored=$'\x01'
fi

channelinfo()
{
/usr/bin/expect <<EOF
spawn telnet $TS_SERVER_ADDRESS $TS_SERVER_QUERY_PORT
expect "Welcome to the TeamSpeak 3 ServerQuery interface, type \"help\" for a list of commands and \"help <command>\" for information on a specific command.\r\n\r"
send "login $TS_SERVERADMIN_USERNAME $TS_SERVERADMIN_PASSWORD\r"
expect "error id=0 msg=ok\r\n\r"
send "use 1\r"
expect "error id=0 msg=ok\r\n\r"

match_max 100000

send channellist\r
expect "error id=0 msg=ok\r\n\r"

set output \$expect_out(buffer)
match_max 2000

set CHANNELS_CID [exec printf \$output | grep cid | sed -e {s/|/\n/g} | grep -v -E -e {$ignored} | cut -d " " -f 1 | sed {:a;N;\$!ba;s/\n/|/g}]
set CHANNELS [split \$CHANNELS_CID "|"]

foreach CHANNEL \$CHANNELS {
    send "channelinfo \$CHANNEL\r"
    expect "error id=0 msg=ok\r\n\r"
}

send "logout\r"
expect "error id=0 msg=ok\r\n\r"
send "quit\r"
expect "error id=0 msg=ok\r\n\r"
EOF
}

channelinfo | tr '\n' ' ' | tr -d '\r' | perl -p -e '
s/^.*(?=channellist)//;
s/(?=cid)/\n/g;
s/channel_topic.*(?=seconds_empty)//g;
s/pid=.*(?=channel_name)//g;
s/\serror.*//g
' | grep 'seconds_empty' | grep -v 'seconds_empty=-1' | sed -e 's/\s/ @| /g' | column -t -s '@' | sed -e 's/\\s/ /g;s/|/ @| /g' | column -t -s '@' | sed -e 's/^cid=//;s/channel_name=//;s/seconds_empty=//' | sort -r -n -t '|' -k 3 | perl -pe'
use strict;
sub compound_duration {
    my $sec = shift;
    no warnings "numeric";
    return join ", ", grep { $_ > 0 } int($sec/60/60/24) . " d", int($sec/60/60) % 24 . " hr", int($sec/60) % 60 . " min", int($sec) % 60 . " sec";
}
;s@(?<=\|)*(?<=\s)*(\d+$)@ compound_duration($1)@e;'
